<?php
/**
 * String functions.
 * @see https://github.com/ppKrauss/php-little-utils
 * @uses  isFile() at basiChecks.php
 */


 // // // // // // // // // // // // //
 // BEGIN:getRoot
 //

/**
 * Get the commom start-string of two or more strings.
 * The algorithm splits the string by its differences.
 * @version 1.1 of 2015-06-04
 * @license MIT License Copyright (c) 2016 Peter Krauss
 * @see this function can feed the root for str_splitByRoot() function.
 *
 * @param $a mix, string for final operation, or array iteration.
 * @param $b string with probable commom root, or integer for array index.
 * @param $minLen integer minimal length.
 * @param $retFamily boolean true for return family.
 * @return string $root.
 *
 * @example
 *	$root=str_getRoot($DOIs,1,5);
 *	foreach ($DOIs as $doi) {
 *		$dif = str_splitByRoot($doi, $root, ' * ');
 *		print "\n-- $doi \t= $dif";
 *	}
 */
function str_getRoot($a,$b='',$minLen=1,$retFamily=false) {
	if (is_array($a)) { // $b is a seed.
		if (is_integer($b))
			$b = $a[$b];
        if (!$b && isset($a[0])) $b=$a[0];
		$family = array();
		foreach ($a as $item) {
			if (is_array($item)) die("array of array is invalid");
			$r = str_getRoot($item,$b);
			if (strlen($r)>=$minLen) {
				if ($retFamily) $family[]=$item;
				if ($r!=$b) $b=$r;
			} //if
		} // for
		if ($retFamily) {
			array_unshift($family,$b);
			return $family;
		} else
			return $b;
	} else {  // $b is a root
	    $rooLen = strspn($b ^ $a, "\0");
	    return substr($a,0,$rooLen);
	}
}

/**
 * Splits a string by its root and sufix.
 * @license MIT License Copyright (c) 2016 Peter Krauss
 * @param $str string input.
 * @param $root prefix string (can be empty or NULL as no-root).
 * @param $retSep non-empty for string return.
 * @return mix array(rootFlag,suffix) or string.
 * @see http://codereview.stackexchange.com/q/92601/24276
 */
function  str_splitByRoot($str, $root, $retSep='') {
	$r = ($root && strpos($str,$root)===0) ?
		array($root, substr($str, strlen($root)) ) :
		array( '', $str )
	;
	return $retSep? "$r[0]$retSep$r[1]": $r;
}

//
// END:getRoot
// // // // // // // // // // // // //


/// pt_BR
/**
 * Wrap for format_name_ptBr().
 * @param $val string name.
 */
function format_nomePtBR($val) { return format_name_ptBr($val);} // old function

/**
 * normalize pt-BR proper (people) names.
 * @param $val string name.
 */
function format_name_ptBr($val) {
  // $curloc = setlocale(LC_ALL, 0);
  // nem assim! if (substr($curloc,0,20)!='LC_CTYPE=pt_BR.UTF-8') die("\nERRO323: Brazil requer LC_CTYPE=pt_BR.UTF-8!!");
  $minuscular = [
    'de', 'di', 'do', 'da', 'dos', 'das', 'dello', 'della', 'dalla',
    'dal', 'del', 'e', 'em', 'na', 'no', 'nas', 'nos', 'van', 'von', 'y'
  ];
  $parts = preg_split( '/\s+/', mb_strtolower(trim($val),'UTF-8') );
  $s=[];
  foreach($parts as $w)
    $s[] = in_array($w,$minuscular)? $w: mb_convert_case($w,MB_CASE_TITLE,'UTF-8');
  return join(' ',$s);
}


// // // // // // // // // // // // //
// BEGIN:auto-linking
//

	/* A PHP auto-linking library
	* https://github.com/iamcal/lib_autolink
	* This code is licensed under the MIT license
  *
	* These are global options. You can set them before calling the autolinking
	* functions to change the output.
	$GLOBALS['autolink_options'] = array('strip_protocols' => true,);
		# Should http:// be visibly stripped from the front of URLs?
	*/


/**
 * Find URLs in HTML that are not already links, and make them into links.
 * @license MIT License Copyright (c) 2015 Cal Henderson
 * @param $text string the input TXT, without links.
 * @param $limit integer maximum strlen for label.
 * @param $tagfill string extra attributes for anchor tag A.
 * @param $auto_title boolean ??
 * @return string HTML with possible links.
 */
function autolink($text, $limit=30, $tagfill='', $auto_title = true){

		$text = autolink_do($text, '![a-z][a-z-]+://!i',	$limit, $tagfill, $auto_title);
		$text = autolink_do($text, '!(mailto|skype):!i',	$limit, $tagfill, $auto_title);
		$text = autolink_do($text, '!www\\.!i',			$limit, $tagfill, $auto_title, 'http://');
		return $text;
}

/**
 * Auxiliar to autolink().
 * @license MIT License Copyright (c) 2015 Cal Henderson
 * @param $text string the input TXT, without links.
 * @param $sub ??
 * @param $limit integer maximum strlen for label.
 * @param $tagfill string extra attributes for anchor tag A.
 * @param $auto_title boolean ??
 * @param $force_prefix array ??
 * @return string HTML with possible links.
 */
function autolink_do($text, $sub, $limit, $tagfill, $auto_title, $force_prefix=null){

		$text_l = StrToLower($text);
		$cursor = 0;
		$loop = 1;
		$buffer = '';

		while (($cursor < strlen($text)) && $loop){

			$ok = 1;
			$matched = preg_match($sub, $text_l, $m, PREG_OFFSET_CAPTURE, $cursor);

			if (!$matched){

				$loop = 0;
				$ok = 0;

			}else{

				$pos = $m[0][1];
				$sub_len = strlen($m[0][0]);

				$pre_hit = substr($text, $cursor, $pos-$cursor);
				$hit = substr($text, $pos, $sub_len);
				$pre = substr($text, 0, $pos);
				$post = substr($text, $pos + $sub_len);

				$fail_text = $pre_hit.$hit;
				$fail_len = strlen($fail_text);

				#
				# substring found - first check to see if we're inside a link tag already...
				#
				$bits = preg_split("!</a>!i", $pre);
				$last_bit = array_pop($bits);
				if (preg_match("!<a\s!i", $last_bit)){

					#echo "fail 1 at $cursor<br />\n";

					$ok = 0;
					$cursor += $fail_len;
					$buffer .= $fail_text;
				}
			}

			#
			# looks like a nice spot to autolink from - check the pre
			# to see if there was whitespace before this match
			#
			if ($ok){

				if ($pre){
					if (!preg_match('![\s\(\[\{>]$!s', $pre)){

						#echo "fail 2 at $cursor ($pre)<br />\n";

						$ok = 0;
						$cursor += $fail_len;
						$buffer .= $fail_text;
					}
				}
			}

			#
			# we want to autolink here - find the extent of the url
			#
			if ($ok){
				if (preg_match('/^([a-z0-9\-\.\/\-_%~!?=,:;&+*#@\(\)\$]+)/i', $post, $matches)){

					$url = $hit.$matches[1];

					$cursor += strlen($url) + strlen($pre_hit);
					$buffer .= $pre_hit;

					$url = html_entity_decode($url);

					#
					# remove trailing punctuation from url
					#
					while (preg_match('|[.,!;:?]$|', $url)){
						$url = substr($url, 0, strlen($url)-1);
						$cursor--;
					}
					foreach (array('()', '[]', '{}') as $pair){
						$o = substr($pair, 0, 1);
						$c = substr($pair, 1, 1);
						if (preg_match("!^(\\$c|^)[^\\$o]+\\$c$!", $url)){
							$url = substr($url, 0, strlen($url)-1);
							$cursor--;
						}
					}

					#
					# nice-i-fy url here
					#
					$link_url = $url;
					$display_url = $url;

					if ($force_prefix) $link_url = $force_prefix.$link_url;

					if ($GLOBALS['autolink_options']['strip_protocols']){
						if (preg_match('!^(http|https)://!i', $display_url, $m)){

							$display_url = substr($display_url, strlen($m[1])+3);
						}
					}
					$display_url = autolink_label($display_url, $limit);


					#
					# add the url
					#

					$currentTagfill = $tagfill;
					if ($display_url != $link_url && !preg_match('@title=@msi',$currentTagfill) && $auto_title) {

						$display_quoted = preg_quote($display_url, '!');

						if (!preg_match("!^(http|https)://{$display_quoted}$!i", $link_url)){

							$currentTagfill .= ' title="'.$link_url.'"';
						}
					}

					$link_url_enc = HtmlSpecialChars($link_url);
					$display_url_enc = HtmlSpecialChars($display_url);

					$buffer .= "<a href=\"{$link_url_enc}\"$currentTagfill>{$display_url_enc}</a>";

				}else{
					#echo "fail 3 at $cursor<br />\n";

					$ok = 0;
					$cursor += $fail_len;
					$buffer .= $fail_text;
				}
			}

		}

		#
		# add everything from the cursor to the end onto the buffer.
		#
		$buffer .= substr($text, $cursor);

		return $buffer;
}


/**
 * Auxiliar to autolink().
 * @license MIT License Copyright (c) 2015 Cal Henderson
 * @param $text string label.
 * @param $limit integer maximum strlen for label.
 * @return string label with "..." after limit-3.
 */
function autolink_label($text, $limit){
		if (!$limit)
			return $text;
		elseif (strlen($text) > $limit)
			return substr($text, 0, $limit-3).'...';
		else
			return $text;
}

/**
 * Auxiliar to autolink().
 * @license MIT License Copyright (c) 2015 Cal Henderson
 * @param $text string the input TXT, without links.
 * @param $tagfill string extra attributes for anchor tag A.
 * @return string HTML with possible e-mail link.
 */
function autolink_email($text, $tagfill=''){

		$atom = '[^()<>@,;:\\\\".\\[\\]\\x00-\\x20\\x7f]+'; # from RFC822

		#die($atom);

		$text_l = StrToLower($text);
		$cursor = 0;
		$loop = 1;
		$buffer = '';

		while(($cursor < strlen($text)) && $loop){

			#
			# find an '@' symbol
			#
			$ok = 1;
			$pos = strpos($text_l, '@', $cursor);

			if ($pos === false){

				$loop = 0;
				$ok = 0;

			}else{

				$pre = substr($text, $cursor, $pos-$cursor);
				$hit = substr($text, $pos, 1);
				$post = substr($text, $pos + 1);

				$fail_text = $pre.$hit;
				$fail_len = strlen($fail_text);

				#die("$pre::$hit::$post::$fail_text");

				#
				# substring found - first check to see if we're inside a link tag already...
				#
				$bits = preg_split("!</a>!i", $pre);
				$last_bit = array_pop($bits);
				if (preg_match("!<a\s!i", $last_bit)){

					#echo "fail 1 at $cursor<br />\n";

					$ok = 0;
					$cursor += $fail_len;
					$buffer .= $fail_text;
				}
			}

			#
			# check backwards
			#
			if ($ok){
				if (preg_match("!($atom(\.$atom)*)\$!", $pre, $matches)){

					# move matched part of address into $hit

					$len = strlen($matches[1]);
					$plen = strlen($pre);

					$hit = substr($pre, $plen-$len).$hit;
					$pre = substr($pre, 0, $plen-$len);

				}else{

					#echo "fail 2 at $cursor ($pre)<br />\n";

					$ok = 0;
					$cursor += $fail_len;
					$buffer .= $fail_text;
				}
			}

			#
			# check forwards
			#
			if ($ok){
				if (preg_match("!^($atom(\.$atom)*)!", $post, $matches)){

					# move matched part of address into $hit

					$len = strlen($matches[1]);

					$hit .= substr($post, 0, $len);
					$post = substr($post, $len);

				}else{
					#echo "fail 3 at $cursor ($post)<br />\n";

					$ok = 0;
					$cursor += $fail_len;
					$buffer .= $fail_text;
				}
			}

			#
			# commit
			#
			if ($ok) {

				$cursor += strlen($pre) + strlen($hit);
				$buffer .= $pre;
				$buffer .= "<a href=\"mailto:$hit\"$tagfill>$hit</a>";

			}

		}

		#
		# add everything from the cursor to the end onto the buffer.
		#
		$buffer .= substr($text, $cursor);
		return $buffer;
}

//
// END:auto-linking
// // // // // // // // // // // // //

?>

